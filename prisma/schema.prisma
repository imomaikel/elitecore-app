generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Python server manager models
model AppLog {
  id           Int       @id @default(autoincrement())
  content      String    @db.VarChar(1024)
  file         String    @db.VarChar(64)
  logCreatedAt DateTime? @default(now()) @db.DateTime(0)
}

model Config {
  id                       Int      @id @default(autoincrement())
  rconPassword             String   @db.VarChar(1024)
  serverStatusUpdateDelay  Int      @default(5) @db.TinyInt
  serverControlUpdateDelay Int      @default(3) @db.TinyInt
  countdownUpdateDelay     Int      @default(5) @db.TinyInt
  autoCleanTicketFilesDays Int      @default(21) @db.TinyInt
  currenciesLastUpdated    DateTime @default(now())
  monthlyPaymentGoal       Int      @default(50)
  lastWipe                 DateTime @default(now())
  discordMembers           Int      @default(0)
}

model Server {
  id          Int     @id @default(autoincrement())
  mapName     String  @db.VarChar(45)
  path        String  @db.VarChar(200)
  gameMode    String  @db.VarChar(45)
  gameType    String  @db.VarChar(45)
  autoRestart Int     @db.TinyInt
  customName  String? @db.VarChar(45)
  multiHome   String? @db.VarChar(45)
  queryPort   Int
  rconPort    Int
  lastStatus  String  @default("offline") @db.VarChar(45)
  lastPlayers Int     @default(0) @db.TinyInt
  position    Int     @default(1) @db.TinyInt
  serverName  String  @default("EliteCore")
}

model Player {
  id Int @id @default(autoincrement())

  playerName String
  playerId   String @unique
  playTime   BigInt @default(0)
  lastServer String
}

// Authjs models
enum UserRole {
  ADMIN
  MANAGER
  USER
}

model User {
  id                 String    @id @default(cuid())
  discordId          String?   @unique
  steamId            String?   @unique
  eosId              String?
  avatar             String?
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  role               UserRole  @default(USER)
  selectedDiscordId  String?
  basketIdent        String?
  basketAuthUrl      String?
  currency           String?
  lastViewedTicketId String?

  adminLogs AdminLog[]
  payments  Payment[]
  totalPaid Float      @default(0)

  tickets Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([discordId, steamId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Shop models
model Product {
  id             String    @id @default(cuid())
  productId      Int
  productName    String    @db.TinyText
  categoryName   String    @db.TinyText
  description    String    @db.Text
  image          String?
  totalPrice     Float
  basePrice      Float
  salesTax       Float
  discount       Float
  expirationDate DateTime?
  quantity       Int       @default(1)

  payment   Payment @relation(fields: [paymentId], references: [id])
  paymentId String

  createdAt DateTime @default(now())
}

model Payment {
  id                 String @id @default(cuid())
  transactionId      String @unique
  status             String @db.TinyText
  priceAmount        Float
  priceCurrency      String @db.TinyText
  taxFeeAmount       Float
  taxFeeCurrency     String @db.TinyText
  gatewayFeeAmount   Float
  gatewayFeeCurrency String
  customerEmail      String @db.TinyText
  customerSteamId    String @db.TinyText
  customerUsername   String @db.TinyText
  customerCountry    String @db.TinyText

  products Product[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
}

// Misc models
model Currency {
  id   Int    @id @default(autoincrement())
  code String
  rate Float

  @@unique([code])
}

model Staff {
  id String @id @default(cuid())

  username  String   @db.TinyText
  avatarUrl String   @db.TinyText
  role      String   @db.TinyText
  joinedAt  DateTime
}

// Discord client models 
model Guild {
  // General
  id        Int    @id @default(autoincrement())
  guildId   String
  guildName String @db.TinyText

  // Widgets
  serverStatusChannelId                 String? @db.TinyText
  serverStatusChannelMessageId          String? @db.TinyText
  serverStatusNotifyChannelId           String? @db.TinyText
  serverStatusChannelWebhookId          String? @db.TinyText
  serverStatusChannelWebhookToken       String? @db.TinyText
  serverStatusNotifyChannelWebhookId    String? @db.TinyText
  serverStatusNotifyChannelWebhookToken String? @db.TinyText

  serverControlChannelId              String? @db.TinyText
  serverControlMessageId              String? @db.TinyText
  serverControlChannelWebhookId       String? @db.TinyText
  serverControlChannelWebhookToken    String? @db.TinyText
  serverControlLogChannelId           String? @db.TinyText
  serverControlLogChannelWebhookId    String? @db.TinyText
  serverControlLogChannelWebhookToken String? @db.TinyText

  countdownLastDate         DateTime?
  countdownNextDate         DateTime?
  countdownRestartInMinutes Int       @default(20160)
  countdownChannelId        String?   @db.TinyText
  countdownMessageId        String?   @db.TinyText
  countdownHeader           String    @default("Next wipe countdown")
  countdownDescription      String    @default(":hourglass: The **last** wipe was <old/R>\n:calendar_spiral: The **next** wipe is on <new/F>\n:timer: That will be <new/R>")

  // Stats data
  LeaderboardData LeaderboardData?

  // Roles
  serverControlRoleId String? @db.TinyText

  // Tickets
  ticketCategories        TicketCategory[]
  ticketCategoryChannelId String?
  ticketCategoryMessageId String?

  // Commands
  playersCmdChannelId String? @db.TinyText

  // Logs
  logs      AdminLog[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([guildId])
}

model LeaderboardData {
  id String @id @default(cuid())

  categoryLabel     String  @default("Game Stats")
  categoryChannelId String? @db.TinyText

  damageLabel     String  @default("top-damage")
  damageChannelId String? @db.TinyText
  damageMsgId     String? @db.TinyText

  playtimeLabel       String  @default("top-playtime")
  playtimeChannelId   String? @db.TinyText
  playtimePlayerMsgId String? @db.TinyText
  playtimeUpdateMsgId String? @db.TinyText
  playtimeTribeMsgId  String? @db.TinyText

  killersLabel       String  @default("top-killers")
  killersChannelId   String? @db.TinyText
  killersPlayerMsgId String? @db.TinyText
  killersUpdateMsgId String? @db.TinyText
  killersTribeMsgId  String? @db.TinyText

  deathsLabel       String  @default("top-deaths")
  deathsChannelId   String? @db.TinyText
  deathsPlayerMsgId String? @db.TinyText
  deathsUpdateMsgId String? @db.TinyText
  deathsTribeMsgId  String? @db.TinyText

  kdrLabel       String  @default("top-kdr")
  kdrChannelId   String? @db.TinyText
  kdrPlayerMsgId String? @db.TinyText
  kdrUpdateMsgId String? @db.TinyText
  kdrTribeMsgId  String? @db.TinyText

  wildKillsLabel       String  @default("top-wild-kills")
  wildKillsChannelId   String? @db.TinyText
  wildKillsPlayerMsgId String? @db.TinyText
  wildKillsUpdateMsgId String? @db.TinyText
  wildKillsTribeMsgId  String? @db.TinyText

  tamedKillsLabel       String  @default("top-tamed-kills")
  tamedKillsChannelId   String? @db.TinyText
  tamedKillsPlayerMsgId String? @db.TinyText
  tamedKillsUpdateMsgId String? @db.TinyText
  tamedKillsTribeMsgId  String? @db.TinyText

  Guild   Guild  @relation(fields: [guildId], references: [guildId])
  guildId String @unique
}

model AdminLog {
  id      Int    @id @default(autoincrement())
  content String

  Author   User   @relation(fields: [authorId], references: [id])
  authorId String

  Guild   Guild @relation(fields: [guildId], references: [id])
  guildId Int

  createdAt DateTime @default(now())
}

model Bot {
  id              Int      @id @default(autoincrement())
  token           String   @db.TinyText
  nickname        String   @db.TinyText
  avatar          String   @db.TinyText
  isAvatarUpdated Boolean? @default(false)
  status          Boolean? @default(false)
  clientId        String?  @db.TinyText
  gameName        String?
}

// Ticket models
model TicketCategory {
  id                     String  @id @default(cuid())
  position               Int     @default(1) @db.TinyInt
  limit                  Int     @default(1) @db.TinyInt
  mentionSupport         Boolean @default(false)
  name                   String  @unique
  parentChannelId        String?
  afterCreateDescription String? @db.LongText
  description            String  @db.LongText
  steamRequired          Boolean
  mapSelection           Boolean
  coordinateInput        Boolean
  autoClose              Int     @default(15) // Auto-close the ticket when no message is sent (in minutes)
  createConfirmation     String?
  closeCommand           String? @default("$close")
  image                  String?
  format                 String  @default("#category-#user-#index")

  Guild   Guild? @relation(fields: [guildId], references: [id])
  guildId Int?

  bannedRoleId String?
  supportRoles TicketSupport[]

  tickets Ticket[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model TicketSupport {
  id Int @id @default(autoincrement())

  roleId   String @db.TinyText
  roleName String @db.TinyText

  TicketCategory   TicketCategory? @relation(fields: [ticketCategoryId], references: [id], onDelete: Cascade)
  ticketCategoryId String?
}

model Ticket {
  id              String @id @default(cuid())
  authorDiscordId String
  authorUsername  String
  inviteUrl       String @db.TinyText
  channelId       String @unique
  categoryName    String

  // Optional
  authorSteamId            String? @db.TinyText
  authorEOSId              String? @db.TinyText
  mapName                  String? @db.TinyText
  mapNameMessageId         String? @db.TinyText
  mapNameSelectedMessageId String? @db.TinyText
  coordinates              String? @db.TinyText
  coordinatesMessageId     String? @db.TinyText

  // Webhook
  webhookId    String @db.TinyText
  webhookToken String @db.TinyText

  TicketCategory   TicketCategory? @relation(fields: [ticketCategoryId], references: [id])
  ticketCategoryId String?

  messages TicketMessage[]
  guildId  String

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  closedBy String?

  closedAt  DateTime?
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
}

model TicketMessage {
  id String @id @unique

  content String? @db.LongText

  authorName      String
  authorAvatar    String
  authorDiscordId String

  attachments TicketAttachment[]

  Ticket   Ticket? @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId String?

  createdAt DateTime @default(now())
}

model TicketAttachment {
  id String @id @default(cuid())

  name        String
  path        String
  contentType String?

  TicketMessage   TicketMessage? @relation(fields: [ticketMessageId], references: [id], onDelete: Cascade)
  ticketMessageId String?

  createdAt DateTime @default(now())
}

// Tribe models
enum LogType {
  Your_structure_destroyed @map("Your structure destroyed")
  You_destroyed_structure  @map("You destroyed structure")
  Logged_out               @map("Logged out")
  Logged_in                @map("Logged in")
  Dino_deaths              @map("Dino deaths")
  Tribe_management         @map("Tribe management")
  Auto_destroyed           @map("Auto destroyed")
  Deaths
  Kills
  Groups
  Demolished
  Claimed
  Downloaded
  Transferred
  Soul
  Froze
  Starved
  Uploaded
  Tamed
  Neutered
  Trapped
  Other
}

model TribeLog {
  id Int @id @default(autoincrement())

  tribeId        Int
  tribeName      String
  content        String
  possiblePoints Boolean
  logType        LogType

  timestamp DateTime
}

model Building {
  id Int @id @default(autoincrement())

  label  String
  points Int?
}

enum TribePosition {
  PROMOTE
  DEMOTE
  SAME
}

model Tribe {
  tribeId      Int           @id
  tribeName    String        @db.TinyText
  points       Int           @default(0)
  position     Int?
  newScoreMode TribePosition @default(PROMOTE)
}

model TribeLogBackup {
  id Int @id

  tribeId        Int
  tribeName      String
  content        String
  possiblePoints Boolean
  logType        LogType

  timestamp DateTime
}
