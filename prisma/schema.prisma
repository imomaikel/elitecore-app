generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model App_Log {
  id           Int       @id @default(autoincrement())
  content      String    @db.VarChar(1024)
  file         String    @db.VarChar(64)
  logCreatedAt DateTime? @default(now()) @db.DateTime(0)
}

model Config {
  id                       Int      @id @default(autoincrement())
  rconPassword             String   @db.VarChar(1024)
  serverStatusUpdateDelay  Int      @default(5) @db.TinyInt
  serverControlUpdateDelay Int      @default(3) @db.TinyInt
  currenciesLastUpdated    DateTime @default(now())
}

model Server {
  id          Int     @id @default(autoincrement())
  mapName     String  @db.VarChar(45)
  path        String  @db.VarChar(200)
  gameMode    String  @db.VarChar(45)
  gameType    String  @db.VarChar(45)
  autoRestart Int     @db.TinyInt
  customName  String? @db.VarChar(45)
  multiHome   String? @db.VarChar(45)
  queryPort   Int
  rconPort    Int
  lastStatus  String  @default("offline") @db.VarChar(45)
  lastPlayers Int     @default(0) @db.TinyInt
  position    Int     @default(1) @db.TinyInt
}

model Guild {
  // General
  id        Int    @id @default(autoincrement())
  guildId   String
  guildName String @db.TinyText

  // Widgets
  serverStatusChannelId        String? @db.TinyText
  serverStatusChannelMessageId String? @db.TinyText
  serverStatusNotifyChannelId  String? @db.TinyText
  serverControlChannelId       String? @db.TinyText
  serverControlMessageId       String? @db.TinyText
  serverControlLogChannelId    String? @db.TinyText

  // Roles
  serverControlRoleId String? @db.TinyText

  // Commands
  playersCmdChannelId String? @db.TinyText

  // Logs
  logs      Admin_Log[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([guildId])
}

model Admin_Log {
  id      Int    @id @default(autoincrement())
  content String

  author   User   @relation(fields: [authorId], references: [discordId])
  authorId String

  guild   Guild @relation(fields: [guildId], references: [id])
  guildId Int

  createdAt DateTime @default(now())
}

model Bot {
  id              Int      @id @default(autoincrement())
  token           String   @db.TinyText
  nickname        String   @db.TinyText
  avatar          String   @db.TinyText
  isAvatarUpdated Boolean? @default(false)
  status          Boolean? @default(false)
  clientId        String?  @db.TinyText
  gameName        String?
}

model Currencies {
  id   Int    @id @default(autoincrement())
  code String
  rate Float

  @@unique([code])
}

// NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id             String    @id @default(cuid())
  productId      Int
  productName    String    @db.TinyText
  categoryName   String    @db.TinyText
  description    String    @db.Text
  image          String?
  totalPrice     Float
  basePrice      Float
  salesTax       Float
  discount       Float
  expirationDate DateTime?
  quantity       Int       @default(1)

  payment   Payment @relation(fields: [paymentId], references: [id])
  paymentId String

  createdAt DateTime @default(now())
}

model Payment {
  id                 String @id @default(cuid())
  transactionId      String
  status             String @db.TinyText
  priceAmount        Float
  priceCurrency      String @db.TinyText
  taxFeeAmount       Float
  taxFeeCurrency     String @db.TinyText
  gatewayFeeAmount   Float
  gatewayFeeCurrency String
  customerEmail      String @db.TinyText
  customerSteamId    String @db.TinyText
  customerUsername   String @db.TinyText
  customerCountry    String @db.TinyText

  products Product[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  discordId         String?   @unique
  steamId           String?   @unique
  avatar            String?
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  lastCategoryFetch DateTime? @default(now())
  isAdmin           Boolean?  @default(false)
  selectedDiscordId String?
  basketIdent       String?
  basketAuthUrl     String?
  currency          String?

  admin_log Admin_Log[]
  payments  Payment[]
  totalPaid Float       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([discordId, steamId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
